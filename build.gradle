plugins {
    id 'org.jetbrains.intellij' version '0.2.17'
    id "com.github.breadmoirai.github-release" version "1.1.3"
    id "net.researchgate.release" version "2.4.0"
}

group 'org.aerogear'

apply plugin: 'java'
apply from: "gradle/autovers.gradle"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    ideaSdk
    bundle // dependencies bundled with the plugin
}

dependencies {
    ideaSdk fileTree(dir: 'lib/sdk/', include: ['*/lib/*.jar'])
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile 'org.testng:testng:6.8.21'
    testCompile "org.mockito:mockito-core:2.+"
}

sourceSets {

    // Set test source
    test {
        java {
            java.srcDir 'src/test/java'
        }
    }
}

def IDEA_SDK_URL = 'https://download-cf.jetbrains.com/idea/ideaIC-2017.3.3.tar.gz'
def IDEA_SDK_NAME = 'IntelliJ IDEA Community Edition IC-173.4301.25'

test {
    // Avoid parallel execution, since the IntelliJ boilerplate is not up to that
    maxParallelForks = 1

    useTestNG()
}

task downloadIdeaSdk(type: Download) {
    sourceUrl = IDEA_SDK_URL
    target = file('lib/idea-sdk.tar.gz')
}

task extractIdeaSdk(type: Copy, dependsOn: [downloadIdeaSdk]) {
    def zipFile = file('lib/idea-sdk.tar.gz')
    def outputDir = file("lib/sdk")

    from tarTree(resources.gzip(zipFile))
    into outputDir
}

task dist(type: Zip, dependsOn: [jar, test]) {
    from configurations.bundle
    from jar.archivePath
    rename { f -> "lib/${f}" }
    into project.name
    baseName project.name
}

compileJava.dependsOn extractIdeaSdk

apply plugin: 'idea'

intellij {
    updateSinceUntilBuild false
    version '172.4343.14'
    plugins = ['properties', 'Groovy', 'gradle', 'android']

// Uncomment line matching path to the IDE you want to run the plugin with.

// Android studio linux
//    alternativeIdePath = '/home/summers/Programs/android-studio'

// Android studio and Webstorm, Mac
//    alternativeIdePath = '/Applications/Webstorm.app'
//    alternativeIdePath = '/Applications/Android Studio.app'

}

idea {
    project {
        languageLevel = '1.8'
        jdkName = IDEA_SDK_NAME

        ipr {
            withXml {
                it.node.find { node ->
                    node.@name == 'ProjectRootManager'
                }.'@project-jdk-type' = 'IDEA JDK'

                logger.warn "=" * 71
                logger.warn " Configured IDEA JDK '${jdkName}'."
                logger.warn " Make sure you have it configured IntelliJ before opening the project!"
                logger.warn "=" * 71
            }
        }
    }

    module {
        scopes.COMPILE.minus = [configurations.ideaSdk]

        iml {
            beforeMerged { module ->
                module.dependencies.clear()
            }
            withXml {
                it.node.@type = 'PLUGIN_MODULE'
                //  <component name="DevKit.ModuleBuildProperties" url="file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml" />
                def cmp = it.node.appendNode('component')
                cmp.@name = 'DevKit.ModuleBuildProperties'
                cmp.@url = 'file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml'
            }
        }
    }
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    revertOnFail = false
    preTagCommitMessage = '[AG Mobile Release] - pre tag commit: '
    tagCommitMessage = '[AG Mobile Release] - creating tag: '
    newVersionCommitMessage = '[AG Mobile Release] - new version commit: '
    tagTemplate = 'v${version}'
    buildTasks = ['buildPlugin']

    scmAdapters = [
            net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = /t_release_automation/ // TODO change it to master branch
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }
}
updateVersion.dependsOn tasks.githubRelease

githubRelease {
    targetCommitish = /t_release_automation/ // TODO change it to master branch
    owner = "vchepeli"
    name = "Aerogear Mobile Intellij Plugin v${version}"
    token = "$System.env.GITHUB_TOKEN" // required
    body = "Wham, bam! Thank you for new release!" // TODO, create task to generate CHANGELOG
    draft = false
    prerelease = true
    print ">" * 25
    println buildPlugin.archivePath.parentFile
    releaseAssets = {-> buildPlugin.archivePath.parentFile.listFiles()}
}
// TODO Create task Add CHANGELOG to plugin.xml file

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

processResources {
    inputs.property "version", project.version
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
}

gradle.taskGraph.beforeTask { Task task ->
    print "=" * 25
    println "[$task"
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    print "=" * 25
    println "]$task"
}

// ========= Custom tasks ========= //

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        if (!target.parentFile.exists()) {
            target.parentFile.mkdirs()
        }
        logger.lifecycle "Downloading ${sourceUrl}, this might take a minute..."
        ant.get(src: sourceUrl, dest: target, skipexisting: 'true')
    }
}